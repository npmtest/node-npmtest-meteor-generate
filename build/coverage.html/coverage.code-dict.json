{"/home/travis/build/npmtest/node-npmtest-meteor-generate/test.js":"/* istanbul instrument in package npmtest_meteor_generate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/lib.npmtest_meteor_generate.js":"/* istanbul instrument in package npmtest_meteor_generate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_meteor_generate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_meteor_generate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-meteor-generate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_meteor_generate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_meteor_generate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_meteor_generate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_meteor_generate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_meteor_generate.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_meteor_generate.__dirname + '/lib.npmtest_meteor_generate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/bin/mgen":"#!/usr/bin/env node\n\n// fire up Commander and parse params\nrequire('coffee-script/register');\nrequire('../lib/commands');\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/lib/parse_name.js":"// Meteor Generate\n// Copyright(c) 2014 Adam Brodzinski <adambrodzinski@gmail.com>\n// MIT Licensed\n//\n// Parse a root name and return it's original, singular and plural\n// names in various cases.\n\n/**  It returns an object with singular\n *  and plural names. Access them with .camelS for singular,\n *  .camelP for pluralized case, and .camel for original pluralization.\n *  camelCase, snake_case, and hyphen-case are available in return object.\n *\n *  return example passing in 'foo_posts':\n *  {\n      camel:   'fooPosts'\n      snake:   'foo_posts',\n      hyphen:  'foo-posts',\n      camelS:  'fooPost'\n      snakeS:  'foo_post',\n      hyphenS: 'foo-post',\n      camelP:  'fooPosts',\n      snakeP:  'foo_posts',\n      hyphenP: 'foo-posts'\n *  }\n *\n * @param rootName {String} - root name to convert from\n * @return         {Object}\n * @api public\n */\nmodule.exports = function(rootName) {\n  var changeCase, pluralize, singularRoot, pluralRoot;\n\n  changeCase = require('change-case');\n  pluralize = require('pluralize');\n\n  singularRoot = pluralize.singular(rootName);\n  pluralRoot =   pluralize.plural(rootName);\n  \n  return {\n    camel: changeCase.camel(rootName),\n    snake: changeCase.snake(rootName),\n    hyphen: changeCase.param(rootName),\n    pascal: changeCase.title(rootName)[0] +\n      changeCase.camel(rootName).slice(1),\n\n    camelSingular: changeCase.camel(singularRoot),\n    snakeSingular: changeCase.snake(singularRoot),\n    hyphenSingular: changeCase.param(singularRoot),\n    pascalSingular: changeCase.title(singularRoot)[0] +\n      changeCase.camel(singularRoot).slice(1),\n\n    camelPlural:  changeCase.camel(pluralRoot),\n    snakePlural:  changeCase.snake(pluralRoot),\n    hyphenPlural: changeCase.param(pluralRoot),\n    pascalPlural: changeCase.title(pluralRoot)[0] +\n      changeCase.camel(pluralRoot).slice(1)\n  };\n};\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/lib/rename.js":"// Meteor Generate\n// Copyright(c) 2014 Adam Brodzinski <adambrodzinski@gmail.com>\n// MIT Licensed\n\n\n// Renames variables in a stream of text. Used for converting generic templates\n// into custom ones by renaming __name-pascal__ into `PostsThing`. Converts\n// hyphen, camel, pascal, and original case (as passed in). See spec for all\n// possible variable cases.\n//\n// Examples:\n//     \n//     oldText = \"Greetings __name-pascal__\";\n//     var newText = require('./rename').transform('hello_world', oldText);\n//     newText === \"Greetings HelloWorld\";\n//\n// resName - a {String} name, preferably snake_cased\n// tmplStr - a UTF-8 {String} template, normally streamed from file\n//\n// Returns a {String} with transformed variables\n//\nmodule.exports = function(resName, tmplStr) {\n  var res = require('./parse_name')(resName);\n  var newTmpl = tmplStr;\n\n  // transform camelCase template variables\n  newTmpl = newTmpl.replace(/__name-singular-camel__/g, res.camelSingular);\n  newTmpl = newTmpl.replace(/__name-plural-camel__/g, res.camelPlural);\n  newTmpl = newTmpl.replace(/__name-camel__/g, res.camel);\n\n  // transform hyphenated template variables\n  newTmpl = newTmpl.replace(/__name-singular-hyphen__/g, res.hyphenSingular);\n  newTmpl = newTmpl.replace(/__name-plural-hyphen__/g, res.hyphenPlural);\n  newTmpl = newTmpl.replace(/__name-hyphen__/g, res.hyphen);\n\n  // transform snakeCase template variables\n  newTmpl = newTmpl.replace(/__name-singular-snake__/g, res.snakeSingular);\n  newTmpl = newTmpl.replace(/__name-plural-snake__/g, res.snakePlural);\n  newTmpl = newTmpl.replace(/__name-snake__/g, res.snake);\n\n  // transform PascalCase template variables\n  newTmpl = newTmpl.replace(/__name-singular-pascal__/g, res.pascalSingular);\n  newTmpl = newTmpl.replace(/__name-plural-pascal__/g, res.pascalPlural);\n  newTmpl = newTmpl.replace(/__name-pascal__/g, res.pascal);\n\n  return newTmpl;\n};\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/lib/controller.js":"// Meteor Generate\n// Copyright(c) 2014 Adam Brodzinski <adambrodzinski@gmail.com>\n// MIT Licensed\n//\n// Creates a Meteor controller for Iron Router and custom CRUD methods.\n// Saves controller actions to it's resource namespace. File is generated\n// in `both/controllers` folder and the filename takes on the resource name.\n// When file already exists, the new controllers are appended to the bottom.\n\n/*global templatePath */\nvar fs = require('fs-extra');\n\nmodule.exports = {\n  controllerPath : 'both/controllers/',\n  contrTemplates: templatePath + 'controller/',\n\n  // Public: Creates a controller file & appends any type of controller needed.\n  // If no options are passed in it will create all router and CRUD controllers\n  //\n  // resName - The {String} name of the resource passed in from command line\n  // opts -    The options generated from a Commander command entry.\n  //\n  init: function(resName, opts) {\n\n    // TODO ensure resName is always snake case\n    this.contrFile = this.controllerPath + resName + '.js';\n    this.resName = resName;\n    this.opts = opts;\n\n    // if no args passed in, created all routes\n    if (!opts.index && !opts.new && !opts.show && !opts.edit &&\n        !opts.create && !opts.update && !opts.destroy) {\n      this.opts.all = true;\n    }\n\n    this._createBaseController();\n\n    // add a comment line before adding new routes\n    require('./router').appendRoute(resName, 'comment_line');\n\n    // print 'created' if file doesn't exist yet (created on first append)\n    if (!fs.existsSync(this.contrFile)) {\n      console.log('    Created: ' + this.contrFile);\n    }\n\n    // Append Iron Router Controllers\n\n    if (opts.index || opts.all) {\n      this._appendController('index');\n      require('./page').run(this.resName, {index: true});\n    }\n\n    if (opts.new || opts.all) {\n      this._appendController('new');\n      require('./page').run(resName, {'new': true});\n    }\n\n    if (opts.show || opts.all) {\n      this._appendController('show');\n      require('./page').run(resName, {show: true});\n    }\n\n    if (opts.edit || opts.all) {\n      this._appendController('edit');\n      require('./page').run(resName, {edit: true});\n    }\n\n    // Append data Controllers\n\n    if (opts.create || opts.all) {\n      this._appendController('create');\n    }\n\n    if (opts.update || opts.all) {\n      this._appendController('update');\n    }\n\n    if (opts.destroy || opts.all) {\n      this._appendController('destroy');\n    }\n\n    // add blank line to routes.js after controller routes\n    require('./router').appendRoute(null, 'blank_line');\n\n    // instantiate and add namespace for this resource if needed\n    new (require('./namespace'))().add(resName);\n  },\n\n\n  // Private: Streams controller template from templates folder, renames any\n  // template variables with `lib/rename.js`and appends the new processed\n  // template into user's controller folder `both/controller/posts.js`. If this\n  // file does not exist, it will be created. A route is appended to `routes.js`.\n  //\n  // action - The {String} name of the controller action, eg index, show\n  //\n  _appendController: function(action) {\n    var templateStr = fs.readFileSync(this.contrTemplates + action + '.js',\n                                 {encoding: 'utf-8'});\n\n    // rename template variables and append to controller file\n    templateStr = require('./rename')(this.resName, templateStr);\n    fs.appendFileSync(this.contrFile, templateStr);\n\n    // add a route for new controller\n    if (action !== 'create' && action !== 'update' && action !== 'destroy') {\n      require('./router').appendRoute(this.resName, action);\n      console.log('    Added Route: ' + this.resName + \" \" + action);\n    }\n  },\n\n\n  // Private: Copy base app controller from templates dir to user project\n  // folder `both/controllers/app.js` Will not overwrite existing file.\n  //\n  _createBaseController: function() {\n    if (fs.existsSync(this.controllerPath + '_app.js')) return;\n\n    fs.copySync(this.contrTemplates+'_app.js', this.controllerPath+'_app.js');\n    console.log('    Created: '+ this.controllerPath +'_app.js');\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/lib/init.js":"// Meteor Generate\n// Copyright(c) 2014 Adam Brodzinski <adambrodzinski@gmail.com>\n// MIT Licensed\n\n/*global templatePath, puts */\nvar fs = require('fs-extra'),\n    router = require('./router.js');\n\nmodule.exports = {\n  initSource: templatePath + 'init/',\n\n  // Public: Copy the boilerplate in the templates init folder to\n  // the user's root project folder. Creates a router and client\n  // folder. The project name is used for removing original boilerplate.\n  //\n  // Examples:\n  // require('./init').init('myProjectName');\n  //\n  // projectName - the {String} name of the user's meteor project\n  //\n  init: function(projectName) {\n    var self = this;\n    this.projectName = projectName;\n    this.projDir = './' + projectName + '/';\n    this.packages = this.projDir + '.meteor/packages';\n\n    this._runTerminalCommand('meteor create '+ projectName, function() {\n      // after command is finished\n      router.create(self.projDir);\n      self._copyTemplate();\n      self._removeOriginalMeteorFiles(projectName);\n      self._removeUnwantedPackages();\n      self._addPackagesToPackagesFile();\n\n      puts('\\n-------------------------------------------');\n      puts('  type cd %s to navigate to project', projectName);\n      puts('  then the meteor command to start a server');\n      puts('-------------------------------------------\\n');\n    });\n  },\n\n\n  // Private: Run a command on the command line.\n  //\n  // command - the {String} command to run\n  // callback - a {Function} to call when complete\n  //\n  _runTerminalCommand: function(command, callback) {\n    var exec = require('child_process').exec;\n\n    exec(command, function (err) {\n      if (err) puts('exec error: ' + err);\n      callback.call(this);\n    });\n  },\n\n\n  // Private: Add packages into Meteor's `.meteor/packages` file so that they\n  // can get installed on first bootup. Appends the packages to the end of file\n  //\n  _addPackagesToPackagesFile: function() {\n    fs.appendFileSync(this.projDir + '.meteor/packages', 'iron:router\\n');\n    puts(\"    Added Package: iron:router\");\n  },\n\n\n  // Private: Copy the boilerplate from templates directory and place it\n  // in the user's project root directory. Remove .gitkeep when done\n  //\n  _copyTemplate: function() {\n    fs.copySync(this.initSource, this.projDir);\n    fs.removeSync(this.projDir + 'client/.gitkeep');\n    fs.removeSync(this.projDir + 'server/.gitkeep');\n\n    puts('    Created: .jshintrc');\n    puts('    Created: .jshintignore');\n    puts('    Created: makefile');\n  },\n\n\n  // Private: Removes the original foo.html, foo.js, and foo.css files\n  // that Meteor creates after a `meteor create foo` command\n  //\n  _removeOriginalMeteorFiles: function() {\n    fs.removeSync(this.projDir + this.projectName + '.js');\n    fs.removeSync(this.projDir + this.projectName + '.html');\n    fs.removeSync(this.projDir + this.projectName + '.css');\n    puts('    Removed: original boilerplate');\n  },\n\n\n  // Private: Removes packages that are not wanted for a production app\n  //\n  _removeUnwantedPackages: function() {\n    this._removePackage('insecure');\n    this._removePackage('autopublish');\n    puts(\"Updating Packages\");\n    puts(\"    Removed Package: insecure\");\n    puts(\"    Removed Package: autopublish\");\n  },\n\n\n  // Private: Look at packages file and remove package if present. Stream\n  // packages file, replace, then overwrite original file.\n  //\n  // packageName - The {String} name of the package\n  //\n  _removePackage: function(packageName) {\n    var oldPackages, newPackages;\n\n    oldPackages = fs.readFileSync(this.packages, {encoding: 'utf-8'});\n    newPackages = oldPackages.replace(packageName + '\\n', '');\n    fs.writeFileSync(this.packages, newPackages);\n  }\n\n};\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/lib/router.js":"// Meteor Generate\n// Copyright(c) 2014 Adam Brodzinski <adambrodzinski@gmail.com>\n// MIT Licensed\n\n/*global templatePath */\nvar fs = require('fs-extra');\n\nmodule.exports = {\n  destRoot: 'both/',\n  routeSrc: templatePath + 'router/routes.js',\n  routeDest: 'both/routes.js',\n  terminateRoute: '});//<end-routes>',\n\n  // \\}\\);             - });\n  // \\/\\/<end-routes>  - //<end-routes>\n  beforeEndOfRouter: /\\}\\);\\/\\/<end-routes>/,\n\n\n  // Public: Copy routes.js from templates folder into users `both/` folder.\n  // If file already exists it will not be overwritten.\n  //\n  create: function(projPath) {\n    // handle calling create outside of project and inside\n    var rootPath = (projPath) ? projPath : './';\n\n    // create both folder if it doesn't already exisit\n    fs.mkdirsSync(rootPath);\n\n    // bail if router already exists\n    if (fs.existsSync(rootPath + 'both/routes.js')) return;\n\n    // copy router.js from templates/ to project/both/controllers\n    fs.copySync(this.routeSrc, rootPath + 'both/routes.js');\n    console.log('    Created: both/routes.js');\n  },\n\n\n  // Public: Append the correct route into routes.js. The routes file is\n  // examined for the `end-routes` marker and it is removed. The new route\n  // is inserted onto the end of the file and the marker is re-appended.\n  //\n  // resName - The {String} name of the controller action, eg index, show\n  //\n  appendRoute: function(resName, action) {\n    var route, newContent, oldFileStr, newFileStr, res;\n    resName = resName || '';\n\n    res = require('./parse_name')(resName)\n\n    // set correct route for the required action\n    // TODO Pascal case namespaces, camelcase routes\n    switch (action) {\n      case 'index':\n        route = \"  this.route('\" + res.camelPlural + \"',     { path: '/\"+resName+\"',          controller: \"+res.pascalPlural+\"Controller.Index });\";\n        break;\n      case 'new':\n        route = \"  this.route('\" + res.camelPlural + \"New',  { path: '/\"+resName+\"/new',      controller: \"+res.pascalPlural+\"Controller.New });\";\n        break;\n      case 'show':\n        route = \"  this.route('\" + res.camelPlural + \"Show', { path: '/\"+resName+\"/:id',      controller: \"+res.pascalPlural+\"Controller.Show });\";\n        break;\n      case 'edit':\n        route = \"  this.route('\" + res.camelPlural + \"Edit', { path: '/\"+resName+\"/edit/:id', controller: \"+res.pascalPlural+\"Controller.Edit });\";\n        break;\n      case 'comment_line':\n        route = \"  // \" + resName + \" routes\";\n        break;\n      case 'blank_line':\n        route = \"\";\n        break;\n      default:\n        route = \"  this.route('UNKNOWN', { path: '/', controller: UNKNOWN.index });\";\n        break;\n    }\n\n    // read routes.js from users folder and save to string\n    // concat new route together\n    oldFileStr = fs.readFileSync(this.routeDest, {encoding: 'utf-8'});\n    newContent = route + \"\\n\" + this.terminateRoute;\n\n    // insert new content into current routes.js string\n    // write new content to file `routes/controllers/resource_name.js`\n    newFileStr = oldFileStr.replace(this.beforeEndOfRouter, newContent);\n    fs.writeFileSync(this.routeDest, newFileStr);\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/lib/page.js":"// Meteor Generate\n// Copyright(c) 2014 Adam Brodzinski <adambrodzinski@gmail.com>\n// MIT Licensed\n//\n// Generate a page folder containing an HTML template, JavaScript file\n// and a Sass file. The Sass file include is also appended to /client/sass/comps\n\n\n// XXX dirty dirty dirty (>_<)\n// TODO refactor into clean module\n\n/*global templatePath */\nvar fs = require('fs-extra');\nvar changeCase = require('change-case');\nvar pageTemplates = templatePath + 'page/';\n\nexports.run = function(pageName, opts) {\n  var nameCase, destPath;\n\n  nameCase = {\n    snake:  pageName,\n    camel:  changeCase.camelCase(pageName),\n    hyphen: changeCase.paramCase(pageName)\n  };\n\n\n  // set destination, e.g. client/pages/posts/\n  opts.directory = opts.directory || 'client/pages/';\n  destPath = opts.directory + pageName + '/';\n\n\n  // create a directory in components folder\n  fs.mkdirs(destPath, function (err) {\n    var importStr;\n\n    if (err) {\n      console.error('\\nError creating directory', pageName);\n      console.error(err);\n    } else {\n      copyTemplates();\n    }\n  });\n\n\n  var templatePath = pageTemplates;\n  var pagePath     = destPath;\n\n\n  function copyTemplates() {\n    // if no action flags are passed, scaffold everything\n    if (!opts.index && !opts.new && !opts.show && !opts.edit) {\n      opts.index = true;\n      opts.new = true;\n      opts.show = true;\n      opts.edit = true;\n    }\n\n    if (opts.index) {\n      copyFile({ from: templatePath, to: pagePath, pageName: pageName,\n        filename: 'index', ext: ['.html', '.js', '.scss'],\n        replaceWith: pageName\n      });\n    }\n\n    if (opts.new) {\n      copyFile({ from: templatePath, to: pagePath, pageName: pageName,\n        filename: 'new', ext: ['.html', '.js', '.scss'],\n        replaceWith: pageName + 'New'\n      });\n    }\n\n    if (opts.show) {\n      copyFile({ from: templatePath, to: pagePath, pageName: pageName,\n        filename: 'show', ext: ['.html', '.js', '.scss'],\n        replaceWith: pageName + 'Show'\n      });\n    }\n\n    if (opts.edit) {\n      copyFile({ from: templatePath, to: pagePath, pageName: pageName,\n        filename: 'edit', ext: ['.html', '.js', '.scss'],\n        replaceWith: pageName + 'Edit'\n      });\n    }\n  }\n\n\n  // Refactor into module ------------------------------------------\n  function copyFile(opts) {\n    var importStr, ext;\n\n    if (!opts) return console.log('incomplete options');\n    ext = opts.ext;\n    if (typeof ext === 'string') {\n      ext = [ext]; // turn string ext into array\n    }\n\n    // itterate through each file and process it\n    ext.forEach(function(extension) {\n      var filename;\n\n      filename = opts.filename;\n\n      // handle sass paritals by prepending underscore\n      if (extension === '.scss') {\n        importStr = \"@import '../pages/\" + opts.pageName + \"/\" + filename + \"';\\n\"\n        fs.appendFileSync('client/styles/_pages.scss', importStr)\n        filename = \"_\" + filename;\n      }\n\n      // copy from default folder to destination folder and rename any\n      // variables that may be in each file\n      fs.copy(opts.from + filename + extension,\n              opts.to   + filename + extension, function (err) {\n\n        handleError(err);\n\n        replace(opts.to + filename + extension, function(data) {\n          var res, repl;\n          if (opts.replaceWith) {\n            repl = opts.replaceWith;\n            res = data.replace(/compName/g, changeCase.camelCase(repl));\n            return res.replace(/comp-name/g, changeCase.paramCase(repl));\n          } else {\n            res = data.replace(/compName/g, nameCase.camel);\n            return res.replace(/comp-name/g, nameCase.hyphen);\n          }\n        });\n\n        console.log('    Created:', opts.to+opts.filename+extension);\n      });\n\n    });\n\n  }\n\n\n};\n\n// TODO refactor these into a module\n\n\n\nfunction handleError(err) {\n  if (err) {\n    console.log('\\nError Creating File');\n    console.log(err.stack);\n    process.exit(1);\n  }\n}\n\n\nfunction replace(file, callback) {\n  fs.readFile(file, 'utf8', function (err,data) {\n    if (err) { return console.log(err); }\n\n    var result = callback(data);\n\n    fs.writeFile(file, result, 'utf8', function (err) {\n      if (err) return console.log(err);\n    });\n  });\n}\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/collection/permission.js":"// __name-pascal__ Permissions\n// see docs for more info - http://docs.meteor.com/#allow\n\ndb.__name-camel__.allow({\n  insert: function() {\n    console.log(\"\\n*** db.__name-camel__ insert not secure ***\\n\");\n    return true;\n  },\n\n  update: function() {\n    console.log(\"\\n*** db.__name-camel__ update not secure ***\\n\");\n    return true;\n  },\n\n  remove: function() {\n    console.log(\"\\n*** db.__name-camel__ remove not secure ***\\n\");\n    return true;\n  },\n\n  //fetch: ['owner'],\n\n  // perform a type check to ensure correct data is getting saved\n  transform: function(doc) {\n    check(doc, Match.Optional({\n      _id: String\n    }));\n\n    return doc;\n  }\n});\n\n\ndb.__name-camel__.deny({\n  update: doesNotOwnDocument,\n  remove: doesNotOwnDocument,\n  //fetch: ['owner']\n});\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/component/comp_name.js":"Template.__name-singular-camel__.helpers({\n  \n});\n\nTemplate.__name-singular-camel__.events({\n  \n});\n\nTemplate.__name-singular-camel__.rendered = function() {\n  \n};\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/controller/_app.js":"//------------------------------------------------\n//           Application Controller\n//------------------------------------------------\n\n/*global AppController:true, RouteController */\n\nAppController = RouteController.extend({\n});\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/controller/base.js":"/*global __name-plural-pascal__Controller:true */\n\n__name-plural-pascal__Controller = {};\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/controller/create.js":"// create a __name-singular-pascal__\n__name-plural-pascal__Controller.create = function(data, callback) {\n  console.log('Fired Create __name-singular-pascal__');\n\n  __name-singular-pascal__.create(data, function(err, docId) {\n    if (callback) {\n      callback(err, docId);\n    }\n\n    if (err) {\n      console.log(err);\n    }\n  });\n};\n\n \n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/controller/destroy.js":"// destroy a __name-singular-pascal__\n__name-plural-pascal__Controller.destroy = function(data, callback) {\n  console.log('Fired Destroy __name-singular-pascal__');\n\n  __name-singular-pascal__.destroy(data, function(err, count) {\n    if (callback) {\n      callback(err, count);\n    }\n\n    if (err) {\n      console.log(err);\n    }\n  });\n};\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/controller/edit.js":"// show edit page for single __name-singular-pascal__ : /__name-plural-hyphen__/edit/:id\n__name-plural-pascal__Controller.Edit = AppController.extend({\n  template: '__name-plural-camel__Edit',\n\n  waitOn: function() {\n    //return Meteor.subscribe('__name-singular-camel__', this.params.id);\n  },\n\n  data: function() {\n    //return db.__name-plural-camel__.findOne(this.params.id);\n  },\n\n  onBeforeAction: function() {\n    console.log(\"  [__name-plural-pascal__Controller.Edit]: loading\", this.url);\n    this.next();\n  }\n});\n\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/controller/index.js":"// page for a list of __name-plural-pascal__ - /__name-plural-hyphen__\n__name-plural-pascal__Controller.Index = AppController.extend({\n  template: '__name-plural-camel__',\n\n  waitOn: function() {\n    //return Meteor.subscribe('__name-plural-camel__');\n  },\n\n  data: function() {\n    //return db.__name-plural-camel__.find();\n  },\n\n  onBeforeAction: function() {\n    console.log(\"  [__name-plural-pascal__Controller.Index]: loading\", this.url);\n    this.next();\n  }\n});\n\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/controller/new.js":"// page for creating a single __name-singular-pascal__ - /__name-plural-hyphen__/new/:id\n__name-plural-pascal__Controller.New = AppController.extend({\n  template: '__name-plural-camel__New',\n\n  onBeforeAction: function() {\n    console.log(\"  [__name-plural-pascal__Controller.New]: loading\", this.url);\n    this.next();\n  }\n});\n\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/controller/show.js":"// page for showing a single __name-singular-pascal__ - /__name-plural-hyphen__/:id\n__name-plural-pascal__Controller.Show = AppController.extend({\n  template: '__name-plural-camel__Show',\n\n  waitOn: function() {\n    //return Meteor.subscribe('__name-singular-camel__', this.params.id);\n  },\n\n  data: function() {\n    //return db.__name-plural-camel__.findOne(this.params.id);\n  },\n\n  onBeforeAction: function() {\n    console.log(\"  [__name-plural-pascal__Controller.Show]: loading\", this.url);\n    this.next();\n  }\n});\n\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/controller/update.js":"// update a __name-singular-pascal__\n__name-plural-pascal__Controller.update = function(data, callback) {\n  console.log('Fired Update __name-singular-pascal__');\n\n  __name-singular-pascal__.update(data, function(err, count) {\n    if (callback){\n      callback(err, count);\n    }\n\n    if (err) {\n      console.log(err);\n    }\n  });\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/lib/namespaces.js":"/*global db:true */\n\n// Collections namespace\ndb = {};\n\n// Resource namespaces\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/package/both.js":"","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/package/client.js":"","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/package/package.js":"// See Meteor docs for API use - https://docs.meteor.com/#/full/packagejs\n\nPackage.describe({\n  // Short two-sentence summary.\n  summary: \"What your app does\"\n\n  // Version number.\n  version: \"1.0.0\",\n\n  // Optional. Default is package directory name.\n  name: \"username:package-name\",\n\n  // Optional github URL to your source repository.\n  git: \"https://github.com/something/something.git\",\n});\n\n\nPackage.onUse(function (api) {\n  // If no version is specified for an 'api.use' dependency, use the one defined in Meteor 0.9.0.\n  api.versionsFrom('0.9.0');\n\n  // Use Underscore package, but only on the server.\n  // Version not specified, so it will be as of Meteor 0.9.0.\n  //api.use('underscore', 'server');\n\n  // Use application-configuration package, version 1.0.0 or newer.\n  //api.use('accounts@1.0.0');\n\n  // Give users of this package access to the Templating package.\n  //api.imply('templating')\n\n  // Specify the source code for the package.\n  api.add_files('client.js', 'client');\n  api.add_files('server.js', 'server');\n  api.add_files('both.js', ['client', 'server']);\n\n  // Export the variable 'MyGlobal' in the server (use 'client' for browser)\n  api.export('MyGlobal', 'server');\n});\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/package/server.js":"","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/page/edit.js":"Template.compName.helpers({\n  \n});\n\nTemplate.compName.events({\n  \n});\n\nTemplate.compName.rendered = function() {\n  \n};\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/page/index.js":"Template.compName.helpers({\n  \n});\n\nTemplate.compName.events({\n  \n});\n\nTemplate.compName.rendered = function() {\n  \n};\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/page/new.js":"Template.compName.helpers({\n  \n});\n\nTemplate.compName.events({\n  \n});\n\nTemplate.compName.rendered = function() {\n  \n};\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/page/show.js":"Template.compName.helpers({\n  \n});\n\nTemplate.compName.events({\n  \n});\n\nTemplate.compName.rendered = function() {\n  \n};\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/publish/publish.js":"Meteor.publish('__pub-name__', function() {\n  // TODO index query\n  // XXX bad performance no limit\n  return db.__name-plural-camel__.find({});\n});\n\n\n","/home/travis/build/npmtest/node-npmtest-meteor-generate/node_modules/meteor-generate/templates/default/router/routes.js":"//  Iron Router - for useage see https://github.com/EventedMind/iron-router\n\nRouter.configure({\n  layoutTemplate: 'mainLayout'\n});\n\nRouter.map(function () {\n\n});//<end-routes>\n"}